buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'maven'
apply plugin: 'checkstyle'

apply from: 'project/version-writer.gradle'

def jreVersion = JavaVersion.VERSION_1_7
def encoding = 'UTF-8'

group = "net.awairo.mcmod"
archivesBaseName = "SpawnChecker"
version = versionInfo.version()

ext.modid = "spawnchecker"

sourceCompatibility = jreVersion
targetCompatibility = jreVersion
[compileJava, compileTestJava]*.options*.encoding = encoding

minecraft {
    // forge version
    version = "1.7.10-10.13.0.1180"

    assetDir = "run/assets"

    // this configurations is copied this replacement configuration to source copy tasks
    replace '@VERSION@', project.version
    replace '@MC_VERSION@', project.minecraft.version
    replace '@FINGERPRINT@', project.hasProperty('signing_fingerprint') ? project.signing_fingerprint : ""
}

repositories {
    mavenCentral()
    maven {
        name = "awairo"
        url = "http://maven.awairo.net/"
    }
}

configurations {
    deployerJars
}

dependencies {
    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'

    // use for deploy tasks
    deployerJars 'org.apache.maven.wagon:wagon-ftp:2.2'
}

processResources {

    // exclude debug log configurations
    exclude 'Log4j-config.xsd', 'Log4j-events.dtd', 'Log4j-events.xsd', 'log4j2.xml'

    // expand variables and copy mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':versionInfo.version(), 'modinfoversion':versionInfo.modinfoVersion(), 'mcversion':minecraft.version
    }
}

task deobfJar(type: Jar, dependsOn: classes) {
    classifier = 'dev'
    from sourceSets.main.output
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceMainJava.output
}

task signJar(dependsOn:assemble) << {
    description = "signing jar files"

    if (project.hasProperty('signing_alias') && project.hasProperty('signing_storepass')) {
        logger.info('Signing jar')

        ant.signjar(
            jar: 'build/libs/*.jar',
            alias: project.signing_alias,
            storepass: project.signing_storepass
        )

    } else {
        logger.info('has not singing property')
    }
}

build { dependsOn signJar }

checkstyle {
    configFile = file('project/checkstyle.xml')
    ignoreFailures = true
}
checkstyleMain.excludes = ['net/awairo/mcmod/common/**']
checkstyleTest.excludes = ['**/*']

artifacts {
    archives jar
    archives deobfJar
    archives sourceJar
}

task release(dependsOn:[clean,uploadArchives]) << {
    description 'release '
}

task releaseSnapshot(dependsOn:[clean,uploadArchives]) << {
    description 'snapshot release'
}

// this update configurations be run after the configuration phase
gradle.taskGraph.whenReady { taskGraph ->

    // revision up if release
    if (taskGraph.hasTask(release)) {
        if (versionInfo.beta) {
            println ''
            println '-v-v-v-v-v-v-v-v-v-v-v-v-v-'
            println ''
            println '        BETA VERSION'
            println ''
            println '-v-v-v-v-v-v-v-v-v-v-v-v-v-'
            println ''
            println 'stop :release task...'

            throw new StopExecutionException("beta version")
        }

        logger.quiet('>>>RELEASE<<<')

        revisionUp()
        project.version = versionInfo.version()

    } else if (taskGraph.hasTask(releaseSnapshot)) {
        logger.quiet('>>>SNAPSHOT RELEASE<<<')

        writeVersion()
        project.version = versionInfo.snapshotVersion()

    } else {
        writeVersion()
        project.version = versionInfo.version()
    }

    // update configuration of source copy tasks
    project.tasks.withType(net.minecraftforge.gradle.tasks.user.SourceCopyTask.class).each {
        t -> t.replace '@VERSION@', project.version
    }

    // update configuration of processResources task
    project.tasks.findAll { t -> t.name.equals("processResources") }.each { t ->
        t.from(sourceSets.main.resources.srcDirs) {
            include 'mcmod.info'
            expand 'version':project.version, 'modinfoversion':versionInfo.modinfoVersion(), 'mcversion':minecraft.version
        }
    }

    // when the uploadArchives task has the mavenDeployer props
    if (uploadArchives.repositories.hasProperty('mavenDeployer')
            && uploadArchives.repositories.mavenDeployer.hasProperty('pom')) {
        uploadArchives.repositories.mavenDeployer.pom.version = project.version
    }

    logger.quiet('upload archives version: ' + version)
}

apply from: 'project/publish.gradle'

task wrapper(type: Wrapper) { gradleVersion = '2.0' }
