buildscript {
  apply from: "./gradle/versions.gradle"
  repositories {
    mavenLocal()
    maven { url = "https://files.minecraftforge.net/maven" }
    jcenter()
    mavenCentral()
  }
  dependencies {
    classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
  }
}
apply plugin: "net.minecraftforge.gradle"
apply plugin: "eclipse" // Do not delete it, because referred from FG

import org.apache.tools.ant.filters.FixCrLfFilter

import static java.time.ZoneOffset.UTC
import static java.time.ZonedDateTime.now

version = versionValue
group = "net.awairo.minecraft.spawnchecker"
archivesBaseName = "spawnchecker-${minecraftVersion}"

sourceCompatibility = targetCompatibility = javaVersion
tasks.withType(JavaCompile) {
  sourceCompatibility = targetCompatibility = javaVersion
  options.encoding = "UTF-8"
}

dependencies {
  minecraft "net.minecraftforge:forge:1.13.2-25.0.219"

  implementation "com.google.code.findbugs:jsr305:1.0"

  compileOnly "org.projectlombok:lombok:1.18.6"
  annotationProcessor "org.projectlombok:lombok:1.18.6"
  testCompileOnly "org.projectlombok:lombok:1.18.6"
  testAnnotationProcessor "org.projectlombok:lombok:1.18.6"

  testImplementation "org.mockito:mockito-core:2.+"
  testImplementation "org.apiguardian:apiguardian-api:1.0.0"
  testImplementation "org.junit.jupiter:junit-jupiter-api:5.+"
  testImplementation "org.junit.jupiter:junit-jupiter-engine:5.+"
}

minecraft {
  // the mappings can be changed at any time, and must be in the following format.
  // snapshot_YYYYMMDD   snapshot are built nightly.
  // stable_#            stables are built at the discretion of the MCP team.
  // Use non-default mappings at your own risk. they may not always work.
  // simply re-run your setup task after changing the mappings to update your workspace.
  mappings channel: "snapshot", version: "20180921-1.13"
  // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

  // accessTransformer = file("build/resources/main/META-INF/accesstransformer.cfg")

  // Default run configurations.
  // These can be tweaked, removed, or duplicated as needed.
  runs {
    client {
      ideaModule "${project.name}.main"
      workingDirectory project.file("run/client")

      // Recommended logging data for a userdev environment
      property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"

      // Recommended logging level for the console
      property "forge.logging.console.level", "debug"

      mods {
        spawnchecker {
          source sourceSets.main
        }
      }
    }

    server {
      ideaModule "${project.name}.main"
      workingDirectory project.file("run/server")

      // Recommended logging data for a userdev environment
      property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"

      // Recommended logging level for the console
      property "forge.logging.console.level", "debug"

      environment "MOD_CLASSES", ""
    }
  }
}

task processModsTomlResources(type: Copy) {
  into(sourceSets.main.output.resourcesDir)
  from(sourceSets.main.resources) {
    include "META-INF/mods.toml"
  }
  filter { line ->
    line == "version=\"{dummy}\"" ? "version=\"${project.version}\"" : line
  }
  filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('lf'))
}

processResources {
  dependsOn processModsTomlResources
  exclude "META-INF/mods.toml"
}

jar {
  into("META-INF") {
    from "LICENSE"
    from "CREDITS.md"
  }
  manifest {
    attributes "Specification-Title": "SpawnChecker"
    attributes "Specification-Vendor": "alalwww"
    attributes "Specification-Version": "3.0"
    attributes "Implementation-Title": project.group
    attributes "Implementation-Vendor": "alalwww"
    attributes "Implementation-Version": "${version}"
    attributes "Implementation-Timestamp": now(UTC).toString()
    attributes "CI-Build-Number": buildNumber
    attributes "Git-Commit-Hash": gitHash
  }
}

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
}
