
ant.condition(property: "os", value: "windows") { os(family: "windows") }
ant.condition(property: "os", value: "unix") { os(family: "unix") }

def format = { format, ... args -> String.format(format, args) }

def getRevision = {
    ->
    def file = file(".modrevision")
    String text = file.exists() ? file.getText() : ""
    return text.isEmpty() ? "1" : text
}

def getVersionInfo = {
    ->
    def baos = new ByteArrayOutputStream()
    exec {
        switch (ant.properties.os) {
            case 'windows':
                commandLine 'cmd', '/c', 'git', 'describe', '--tags', '--long'
                break
            case 'unix':
                commandLine 'git', 'describe', '--tags', '--long'
                break
            default:
                logger.error("unknown os")
                throw new RuntimeException("unknown os")
        }

        standardOutput = baos
    }

    // pattern [git tag(v0.0 or v0.0b)]-[commit count(0)]-[githash(g+deadbeaf)]
    def (describe, major, minor, build, githash) = (baos.toString().trim() =~ /^v(\d+)\.(\d+)b?-(\d+)-(g.+)$/)[0]
    def beta = (baos.toString().trim() =~ /^v\d+\.\d+b-\d+-g.+$/).matches()
    def revision = getRevision()

    return new VersionInfo(major, minor, build, revision, githash, beta)
}

// add version info
project.ext.versionInfo = getVersionInfo()

// ------------------------------------------------------------------------------------

// writeversion task
project.ext.writeVersion = {
    ->

    def fw = file("src/main/resources/version.properties")
    fw.metaClass.writeLine = { f, ... a -> append(format(f, a) + "\n") }
    fw.write("")

    fw.writeLine("###################################################")
    fw.writeLine("# version.properties")
    fw.writeLine("#")
    fw.writeLine("# create: %s", new Date().format("yyyy-MM-dd HH:mm:ss.SSS (Z)"))
    fw.writeLine("#")
    fw.writeLine("###################################################")
    fw.writeLine("")
    fw.writeLine("%s.version = %s", project.modid, project.versionInfo.version())
    fw.writeLine("%s.version.githash = %s", project.modid, project.versionInfo.githash)
    fw.writeLine("minecraft.version = %s", project.minecraft.version)

    logger.quiet(format("updated version.properties: %s (%s)",
            project.versionInfo.version(), project.versionInfo.githash))
}

project.ext.revisionUp = {
    ->

    def vi = project.versionInfo

    logger.quiet(format("current revision: %s", vi.revision))

    vi.revision += 1
    file(".modrevision").write(Integer.toString(vi.revision))

    logger.quiet(format("    new revision: %s", vi.revision))

    writeVersion()
}

project.ext.revisionDown = {
    ->

    def vi = project.versionInfo

    logger.quiet(format("current revision: %s", vi.revision))

    if (vi.revision > 1) vi.revision -= 1
    file(".modrevision").write(Integer.toString(vi.revision))

    logger.quiet(format("    new revision: %s", vi.revision))

    writeVersion()
}

// ------------------------------------------------------------------------------------

task writeVersion << {
    description = "create new version.properties"
    writeVersion()
}

task revisionUp << {
    description = "revision count up"
    revisionUp()
}

task revisionDown << {
    description = "revision count down"
    revisionDown()
}

// ------------------------------------------------------------------------------------

def class VersionInfo {
    def major
    def minor
    def build
    def revision
    def githash
    def beta;

    def VersionInfo(... values) {
        major = Integer.valueOf(values[0])
        minor = Integer.valueOf(values[1])
        build = Integer.valueOf(values[2])
        revision = Integer.valueOf(values[3])
        githash = values[4]
        beta = values[5]
    }

    // 0.0.0-SNAPSHOT or 0.0.0.0
    def version()
    {
        return (beta
            ? String.format("%s.%s.%s-SNAPSHOT", major, minor, build)
            : String.format("%s.%s.%s.%s", major, minor, build, revision))
    }

    // 0.0.0 SANPSHOT or 0.0.0 #0
    def modinfoVersion()
    {
        return (beta
            ? String.format("%s.%s.%s SNAPSHOT", major, minor, build)
            : String.format("%s.%s.%s #%s", major, minor, build, revision))
    }

    def String toString() { return version }
}